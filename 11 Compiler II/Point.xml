<class>
<keyword> class </keyword>
<identifier> Point </identifier>
<symbol> { </symbol>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> x </identifier>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> static </keyword>
<keyword> int </keyword>
<identifier> pointCount </identifier>
<symbol> ; </symbol>
</classVarDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> int </keyword>
<identifier> distance </identifier>
<symbol> ( </symbol>
<parameterList>
<identifier> Point </identifier>
<identifier> other </identifier>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<varDec>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> dx </identifier>
<symbol> , </symbol>
<identifier> dy </identifier>
<symbol> ; </symbol>
</varDec>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> dx </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> x </identifier>
</term>
<symbol> - </symbol>
<term>
<identifier> other </identifier>
<symbol> . </symbol>
<identifier> getx </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> dy </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> y </identifier>
</term>
<symbol> - </symbol>
<term>
<identifier> other </identifier>
<symbol> . </symbol>
<identifier> gety </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<returnStatement>
<keyword> return </keyword>
<expression>
<term>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> sqrt </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> dx </identifier>
</term>
<symbol> * </symbol>
<term>
<identifier> dx </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> + </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> dy </identifier>
</term>
<symbol> * </symbol>
<term>
<identifier> dy </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<symbol> } </symbol>
</class>
